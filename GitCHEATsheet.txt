Git task	Notes	Git commands
Tell Git who you are	Configure the author name and email address to be used with your commits.
Note that Git strips some characters (for example trailing periods) from user.name.

git config --global user.name "Sam Smith"
git config --global user.email sam@example.com

Create a new local repository	 	
git init
Check out a repository	Create a working copy of a local repository:	
git clone /path/to/repository
For a remote server, use:	
git clone username@host:/path/to/repository
Add files	Add one or more files to staging (index):	
git add <filename>

git add *
Commit	Commit changes to head (but not yet to the remote repository):	
git commit -m "Commit message"
Commit any files you've added with git add, and also commit any files you've changed since then:	
git commit -a
Push	Send changes to the master branch of your remote repository:	
git push origin master
Status	List the files you've changed and those you still need to add or commit:	
git status
Connect to a remote repository	If you haven't connected your local repository to a remote server, add the server to be able to push to it:	git remote add origin <server>
List all currently configured remote repositories:	git remote -v
Branches	Create a new branch and switch to it:	
git checkout -b <branchname>
Switch from one branch to another:	
git checkout <branchname>
List all the branches in your repo, and also tell you what branch you're currently in:	
git branch
Delete the feature branch:	
git branch -d <branchname>
Push the branch to your remote repository, so others can use it:	
git push origin <branchname>
Push all branches to your remote repository:	
git push --all origin
Delete a branch on your remote repository:	
git push origin :<branchname>
Update from the remote repository	Fetch and merge changes on the remote server to your working directory:	git pull
To merge a different branch into your active branch:	
git merge <branchname>
View all the merge conflicts:
View the conflicts against the base file:

Preview changes, before merging:

git diff
git diff --base <filename>

git diff <sourcebranch> <targetbranch>
After you have manually resolved any conflicts, you mark the changed file:	
git add <filename>
Tags	You can use tagging to mark a significant changeset, such as a release:	
git tag 1.0.0 <commitID>
CommitId is the leading characters of the changeset ID, up to 10, but must be unique. Get the ID using:	
git log
Push all tags to remote repository:	
git push --tags origin
Undo local changes	If you mess up, you can replace the changes in your working tree with the last content in head:
Changes already added to the index, as well as new files, will be kept.

git checkout -- <filename>
Instead, to drop all your local changes and commits, fetch the latest history from the server and point your local master branch at it, do this:	
git fetch origin

git reset --hard origin/master
Search	Search the working directory for foo():	git grep "foo()"

The git revert command can be considered an 'undo' type command, however, it is not a traditional undo operation. Instead of removing the commit from the project history, it figures out how to invert the changes introduced by the commit and appends a new commit with the resulting inverse content. This prevents Git from losing history, which is important for the integrity of your revision history and for reliable collaboration.

The git revert command is used for undoing changes to a repository's commit history. Other 'undo' commands like, git checkout and git reset, move the HEAD and branch ref pointers to a specified commit. Git revert also takes a specified commit, however, git revert does not move ref pointers to this commit. A revert operation will take the specified commit, inverse the changes from that commit, and create a new "revert commit". The ref pointers are then updated to point at the new revert commit making it the tip of the branch.

To demonstrate letâ€™s create an example repo using the command line examples below:

$ mkdir git_revert_test
$ cd git_revert_test/
$ git init .
Initialized empty Git repository in /git_revert_test/.git/
$ touch demo_file
$ git add demo_file
$ git commit -am"initial commit"
[main (root-commit) 299b15f] initial commit
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 demo_file
$ echo "initial content" >> demo_file
$ git commit -am"add new content to demo file"
[main 3602d88] add new content to demo file
n 1 file changed, 1 insertion(+)
$ echo "prepended line content" >> demo_file
$ git commit -am"prepend content to demo file"
[main 86bb32e] prepend content to demo file
 1 file changed, 1 insertion(+)
$ git log --oneline
86bb32e prepend content to demo file
3602d88 add new content to demo file
299b15f initial commit
Here we have initialized a repo in a newly created directory named git_revert_test. We have made 3 commits to the repo in which we have added a file demo_file and modified its content twice. At the end of the repo setup procedure, we invoke git log to display the commit history, showing a total of 3 commits. With the repo in this state, we are ready to initiate a git revert.

$ git revert HEAD
[main b9cd081] Revert "prepend content to demo file" 1 file changed, 1 deletion(-)
Git revert expects a commit ref was passed in and will not execute without one. Here we have passed in the HEAD ref. This will revert the latest commit. This is the same behavior as if we reverted to commit 3602d8815dbfa78cd37cd4d189552764b5e96c58. Similar to a merge, a revert will create a new commit which will open up the configured system editor prompting for a new commit message. Once a commit message has been entered and saved Git will resume operation. We can now examine the state of the repo using git log and see that there is a new commit added to the previous log: